import base64
import gzip
import json
import boto3
import os
import re
from datetime import datetime

def lambda_handler(event, context):
    # Decode and decompress the log data
    compressed_payload = base64.b64decode(event['awslogs']['data'])
    uncompressed_payload = gzip.decompress(compressed_payload)
    log_data = json.loads(uncompressed_payload)

    formatted_message = format_log_data(log_data)

    send_sns_email(formatted_message)

    return {
        'statusCode': 200,
        'body': json.dumps('Successfully processed and sent log data')
    }

def format_log_data(log_data):
    formatted_message = f"Log Group: {log_data['logGroup']}\n"
    formatted_message += f"Log Stream: {log_data['logStream']}\n\n"
    formatted_message += "Log Events:\n"

    for event in log_data['logEvents']:
        timestamp = datetime.fromtimestamp(event['timestamp'] / 1000).strftime('%Y-%m-%d %H:%M:%S')
        formatted_message += f"\nTimestamp: {timestamp}\n"
        sanitized_message = sanitize_message(event['message'])
        formatted_message += f"Message: {sanitized_message}\n"
        formatted_message += "-" * 50 + "\n"

    return formatted_message

def sanitize_message(message):
    # Remove password fields
    sanitized = re.sub(r'"password"\s*:\s*"[^"]*"', '"password":"[REDACTED]"', message)
    return sanitized

def send_sns_email(message):
    sns_client = boto3.client('sns')
    sns_topic_arn = 'arn:aws:sns:ap-northeast-1:810419536323:TestSNSAlarm'

    sns_client.publish(
        TopicArn=sns_topic_arn,
        Subject='[Aqtia] Error Notification',
        Message=message
    )
